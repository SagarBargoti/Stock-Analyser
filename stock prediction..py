{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNKHPrpQ9rfFefqAfx1x1Zj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Atharv1906/Stock-analyser/blob/main/Stock%20Prediction.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "VzpVhWDdV7Ok",
        "outputId": "9c1e5bb2-d370-4163-913f-e20dc2de4cde"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[*********************100%***********************]  4 of 4 completed\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Directory /content/heatmap_images created!\n",
            "Epoch 1/5\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 10s/step - accuracy: 0.6667 - loss: 0.6676 - val_accuracy: 0.0000e+00 - val_loss: 55.2108\n",
            "Epoch 2/5\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step - accuracy: 0.6667 - loss: 18.4036 - val_accuracy: 0.0000e+00 - val_loss: 22.2893\n",
            "Epoch 3/5\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step - accuracy: 0.6667 - loss: 7.4297 - val_accuracy: 1.0000 - val_loss: 0.2372\n",
            "Epoch 4/5\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step - accuracy: 0.3333 - loss: 1.1159 - val_accuracy: 1.0000 - val_loss: 0.3818\n",
            "Epoch 5/5\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step - accuracy: 0.3333 - loss: 0.8924 - val_accuracy: 1.0000 - val_loss: 0.6206\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 68ms/step - accuracy: 1.0000 - loss: 0.6206\n",
            "Validation Loss: 0.6206201314926147, Validation Accuracy: 1.0\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 161ms/step\n",
            "Predictions: [[0.46238947]\n",
            " [0.46238947]\n",
            " [0.46238947]\n",
            " [0.46238947]]\n",
            "✅ Dummy labels.csv created.\n",
            "✅ Images loaded and split. Shapes:\n",
            "X_train: (8, 128, 128, 3) y_train: (8,)\n",
            "X_val: (2, 128, 128, 3) y_val: (2,)\n",
            "Epoch 1/5\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3s/step - accuracy: 0.2500 - loss: 0.7409 - val_accuracy: 0.5000 - val_loss: 5.5158\n",
            "Epoch 2/5\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 289ms/step - accuracy: 0.7500 - loss: 3.3779 - val_accuracy: 0.5000 - val_loss: 3.6392\n",
            "Epoch 3/5\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - accuracy: 0.7500 - loss: 1.2685 - val_accuracy: 0.5000 - val_loss: 1.6638\n",
            "Epoch 4/5\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 297ms/step - accuracy: 0.7500 - loss: 0.6732 - val_accuracy: 0.5000 - val_loss: 0.7100\n",
            "Epoch 5/5\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - accuracy: 0.7500 - loss: 0.5073 - val_accuracy: 0.5000 - val_loss: 0.6743\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 56ms/step - accuracy: 0.5000 - loss: 0.6743\n",
            "✅ Validation Loss: 0.6743, Validation Accuracy: 0.5000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAJOCAYAAABm7rQwAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAA0RtJREFUeJzs3Xd4VGX6xvHvTCrpkITQCYTei4B0FJAm1cK67o8iYgMFQVcRFcGCBV0LKoqCuuKCIiAK0kEkoKAovYYSOgRIJ23m/P4YMhJDSZnkpNyf65rrOpw5886d4O68PPO+z7EYhmEgIiIiIiIiIiJSiKxmBxARERERERERkdJHRSkRERERERERESl0KkqJiIiIiIiIiEihU1FKREREREREREQKnYpSIiIiIiIiIiJS6FSUEhERERERERGRQqeilIiIiIiIiIiIFDoVpUREREREREREpNCpKCUiIiIiIiIiIoVORSkRkWLqyJEjWCwWpk2bZnYUEREREfmb8PBwbr/9drNjiBRpKkqJlCCfffYZFouF3377zewoJUJm0edaj1dffdXsiCIiInINH3zwARaLhTZt2pgdRQpIeHj4NedpPXv2NDueiOSAu9kBRESKunvuuYfevXtnO9+8eXMT0oiIiEhOzJkzh/DwcDZv3szBgwepVauW2ZGkADRr1ozx48dnO1+pUiUT0ohIbqkoJSKlWlJSEr6+vte9pkWLFvzrX/8qpEQiIiKSX4cPH2bjxo0sWLCABx98kDlz5jBp0iSzY11VTuYipVVGRgZ2ux1PT89rXlO5cmXN00SKMW3fEymF/vjjD3r16kVAQAB+fn507dqVX375Jcs16enpTJ48mdq1a+Pt7U1wcDAdOnRg5cqVzmtOnz7N8OHDqVKlCl5eXlSsWJH+/ftz5MiRG2ZYs2YNHTt2xNfXl6CgIPr378+ePXucz8+fPx+LxcJPP/2U7bUfffQRFouFnTt3Os/t3buXO++8k3LlyuHt7c1NN93E4sWLs7wuc3vjTz/9xCOPPEL58uWpUqVKTn9t15XZM2DFihU0a9YMb29vGjRowIIFC7Jde+jQIe666y7KlSuHj48PN998M0uWLMl2XUpKCi+88AJ16tTB29ubihUrMmjQIKKiorJd+/HHHxMREYGXlxetWrViy5YtWZ7Pz9+ViIhIcTNnzhzKli1Lnz59uPPOO5kzZ85Vr4uNjeXxxx8nPDwcLy8vqlSpwpAhQ4iJiXFec6PP43Xr1mGxWFi3bl2WsTPbAHz22WfOc8OGDcPPz4+oqCh69+6Nv78/9957LwA///wzd911F9WqVcPLy4uqVavy+OOPc+nSpWy59+7dy913301oaChlypShbt26TJw4EYC1a9disVhYuHBhttd99dVXWCwWNm3adN3f343mKmfOnMHd3Z3Jkydne+2+ffuwWCxMnz49y+957NixVK1aFS8vL2rVqsVrr72G3W7P9vuaNm0ab7/9tnNes3v37utmzYnM3/uhQ4fo0aMHvr6+VKpUiSlTpmAYRpZrk5KSGD9+vDNr3bp1mTZtWrbrAL788ktat26Nj48PZcuWpVOnTqxYsSLbdRs2bKB169Z4e3tTs2ZNvvjiiyzP52TeLVJSaaWUSCmza9cuOnbsSEBAAP/+97/x8PDgo48+okuXLvz000/OvgsvvPACU6dO5f7776d169bEx8fz22+/sXXrVrp37w7AHXfcwa5du3j00UcJDw/n7NmzrFy5kujoaMLDw6+ZYdWqVfTq1YuaNWvywgsvcOnSJd577z3at2/P1q1bCQ8Pp0+fPvj5+fH111/TuXPnLK+fN28eDRs2pFGjRs6fqX379lSuXJmnn34aX19fvv76awYMGMC3337LwIEDs7z+kUceITQ0lOeff56kpKQb/s6Sk5OzTE4zBQUF4e7+1/+NHjhwgMGDB/PQQw8xdOhQZs+ezV133cWyZcucv7MzZ87Qrl07kpOTeeyxxwgODubzzz+nX79+zJ8/35nVZrNx++23s3r1av7xj38wZswYEhISWLlyJTt37iQiIsL5vl999RUJCQk8+OCDWCwWXn/9dQYNGsShQ4fw8PDI19+ViIhIcTRnzhwGDRqEp6cn99xzDx9++CFbtmyhVatWzmsSExPp2LEje/bs4b777qNFixbExMSwePFijh8/TkhISK4+j3MqIyODHj160KFDB6ZNm4aPjw8A33zzDcnJyTz88MMEBwezefNm3nvvPY4fP84333zjfP327dvp2LEjHh4ePPDAA4SHhxMVFcX333/Pyy+/TJcuXahatSpz5szJNgeaM2cOERERtG3b9pr5cjJXCQsLo3Pnznz99dfZVqDNmzcPNzc37rrrLsAxj+rcuTMnTpzgwQcfpFq1amzcuJEJ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W7KVK1dmm3xd+U1kSXCtVV/GFQ05C/rvSkREpChYs2YNp06dYu7cudSuXdv5uPvuuwGu2fA8P661YurKVVlX8vLyyra6xmaz0b17d5YsWcJTTz3FokWLWLlypbNJ+pUNwXNqyJAh/PTTTxw/fpyoqCh++eUXl9+l7h//+Af79+/nzz//BODrr7+ma9euhISEOK+x2+107979mvO0O+64I8uYpXGelpN5t0hJpUbnIqVIaGgoPj4+7Nu3L9tze/fuxWq1UrVqVee5cuXKMXz4cIYPH05iYiKdOnXihRde4P7773deExERwfjx4xk/fjwHDhygWbNmvPnmm3z55ZdXzZD5rdW1MoSEhGS5LfLgwYP5/PPPWb16NXv27MEwjCxFqcxvvDw8PJzfuJklc9XWlZPT/fv3AzibiVevXv2aP3vm8+D4vf7666+kp6c7m5XnV27/rkRERIqbOXPmUL58ed5///1szy1YsICFCxcyY8YMypQpQ0RERJY7+V5NTj6PM1cox8bGZjmfuaomJ3bs2MH+/fv5/PPPGTJkiPP83+++ljnvuVFucBSMxo0bx//+9z8uXbqEh4dHljnUteR0rgIwYMAAHnzwQeeq9v379zNhwoQsr4uIiCAxMdH0eZrdbufQoUPO1VFw9XnaqlWrSEhIyLJa6mrzNLvdzu7du2nWrJlL8uVk3i1SEmmllEgp4ubmxm233cZ3333nXKYMjrusfPXVV3To0MG5Je38+fNZXuvn50etWrVITU0FHHdSSUlJyXJNREQE/v7+zmuupmLFijRr1ozPP/88y+Rt586drFixgt69e2e5vlu3bpQrV4558+Yxb948WrdunWVZd/ny5enSpQsfffQRp06dyvZ+586du/4vxYVOnjyZ5fbL8fHxfPHFFzRr1owKFSoA0Lt3bzZv3pzlVsxJSUl8/PHHhIeHO5eB33HHHcTExGS5nXIm4yq3JL6evP5diYiIFCeXLl1iwYIF3H777dx5553ZHqNHjyYhIYHFixcDjs/abdu2ZfnszpT5WZuTz+Pq1avj5uaWrTfSBx98kOPsmatprvyMNwyDd955J8t1oaGhdOrUiVmzZhEdHX3VPJlCQkLo1asXX375JXPmzKFnz55ZVjBdS07nKuDohdSjRw++/vpr5s6di6enJwMGDMgy3t13382mTZtYvnx5tveKjY0lIyPjhplc5cq/R8MwmD59Oh4eHnTt2hVw/Ow2my3b3/d//vMfLBYLvXr1AhzFOKvVypQpU7KtYsvtPA1uPO8WKcm0UkqkBJo1axbLli3Ldn7MmDG89NJLrFy5kg4dOvDII4/g7u7ORx99RGpqKq+//rrz2gYNGtClSxdatmxJuXLl+O2335g/f76zQeT+/fvp2rUrd999Nw0aNMDd3Z2FCxdy5swZ/vGPf1w33xtvvEGvXr1o27YtI0aM4NKlS7z33nsEBgbywgsvZLnWw8ODQYMGMXfuXJKSkpg2bVq28d5//306dOhA48aNGTlyJDVr1uTMmTNs2rSJ48ePs23btjz8Fv+ydevWq64m+vstlevUqcOIESPYsmULYWFhzJo1izNnzjB79mznNU8//TT/+9//6NWrF4899hjlypXj888/5/Dhw3z77bfO5fxDhgzhiy++YNy4cWzevJmOHTuSlJTEqlWreOSRR+jfv3+O8+fn70pERKS4WLx4MQkJCfTr1++qz998882EhoYyZ84cBg8ezJNPPsn8+fO56667uO+++2jZsiUXLlxg8eLFzJgxg6ZNm+bo8zgwMJC77rqL9957D4vFQkREBD/88EO2XknXU69ePSIiInjiiSc4ceIEAQEBfPvtt1e9Qcm7775Lhw4daNGiBQ888AA1atTgyJEjLFmyxLmNLtOQIUO48847AXjxxRdzlCWnc5VMgwcP5l//+hcffPABPXr0ICgoKMvzTz75JIsXL+b2229n2LBhtGzZkqSkJHbs2MH8+fM5cuRIjopl13LixImrztP8/PyyFMi8vb1ZtmwZQ4cOpU2bNvz4448sWbKEZ555xtlYvW/fvtxyyy1MnDiRI0eO0LRpU1asWMF3333H2LFjiYiIABx9RCdOnMiLL75Ix44dGTRoEF5eXmzZsoVKlSoxderUXP0MN5p3i5RoJtzxT0QKyOzZs695W1zAOHbsmGEYhrF161ajR48ehp+fn+Hj42PccsstxsaNG7OM9dJLLxmtW7c2goKCjDJlyhj16tUzXn75ZSMtLc0wDMOIiYkxRo0aZdSrV8/w9fU1AgMDjTZt2hhff/11jrKuWrXKaN++vVGmTBkjICDA6Nu3r7F79+6rXrty5UoDMCwWi/Nn+LuoqChjyJAhRoUKFQwPDw+jcuXKxu23327Mnz8/2+9ny5YtOcqYeWviaz2GDh3qvLZ69epGnz59jOXLlxtNmjQxvLy8jHr16hnffPPNVbPeeeedRlBQkOHt7W20bt3a+OGHH7Jdl5ycbEycONGoUaOG4eHhYVSoUMG48847jaioqCz53njjjWyvBZy3fM7v35WIiEhx0LdvX8Pb29tISkq65jXDhg0zPDw8jJiYGMMwDOP8+fPG6NGjjcqVKxuenp5GlSpVjKFDhzqfN4wbfx4bhmGcO3fOuOOOOwwfHx+jbNmyxoMPPmjs3LnTAIzZs2c7rxs6dKjh6+t71Wy7d+82unXrZvj5+RkhISHGyJEjjW3btmUbwzAMY+fOncbAgQOdc4m6desazz33XLYxU1NTjbJlyxqBgYHGpUuXcvJrNAwj53MVwzCM+Ph4o0yZMgZgfPnll1e9JiEhwZgwYYJRq1Ytw9PT0wgJCTHatWtnTJs2zTm3vN685lqqV69+zXla9erVnddl/t6joqKM2267zfDx8THCwsKMSZMmGTabLVvWxx9/3KhUqZLh4eFh1K5d23jjjTcMu92e7f1nzZplNG/e3PDy8jLKli1rdO7c2Vi5cmWWfH369Mn2us6dOxudO3d2/vlG826RksxiGHlYXygiIlmEh4fTqFEjfvjhB7OjiIiIiACQkZFBpUqV6Nu3L59++qnZcUwzbNgw5s+fT2JiotlRRORv1FNKRERERESkBFq0aBHnzp3L0jxdRKQoUU8pERERERGREuTXX39l+/btvPjiizRv3pzOnTubHUlE5Kq0UkpERERERKQE+fDDD3n44YcpX748X3zxhdlxRESuST2lRERERERERESk0GmllIiIiIiIiIiIFDoVpUREREREREREpNAV60bndrudkydP4u/vj8ViMTuOiIiIFFOGYZCQkEClSpWwWkvvd3aaW4mIiIgr5HRuVayLUidPnqRq1apmxxAREZES4tixY1SpUsXsGKbR3EpERERc6UZzq2JdlPL39wccP2RAQIDJaURERKS4io+Pp2rVqs65RWmluZWIiIi4Qk7nVsW6KJW5rDwgIEATJxEREcm30r5lTXMrERERcaUbza1Kb9MEERERERERERExjYpSIiIiIiIiIiJS6FSUEhERERERERGRQlese0qJiEjJY7PZSE9PNzuGlDAeHh64ubmZHUNERERErqCilIiIFAmGYXD69GliY2PNjiIlVFBQEBUqVCj1zcxFREREigoVpUREpEjILEiVL18eHx8fFQ7EZQzDIDk5mbNnzwJQsWJFkxOJiIiICKgoJSIiRYDNZnMWpIKDg82OIyVQmTJlADh79izly5fXVj4RERGRIkCNzkVExHSZPaR8fHxMTiIlWeZ/X+pZJiIiIlI0qCglIiJFhrbsSUHSf18iIiIiRYuKUiIiIiIiIiIiUuhUlBIRESliwsPDefvtt3N8/bp167BYLLpzoYiIiIgUKypKiYiI5JHFYrnu44UXXsjTuFu2bOGBBx7I8fXt2rXj1KlTBAYG5un9ckrFLxERERFxJd19T0REJI9OnTrlPJ43bx7PP/88+/btc57z8/NzHhuGgc1mw939xh+9oaGhucrh6elJhQoVcvUaERERERGzaaWUiIhIHlWoUMH5CAwMxGKxOP+8d+9e/P39+fHHH2nZsiVeXl5s2LCBqKgo+vfvT1hYGH5+frRq1YpVq1ZlGffv2/csFguffPIJAwcOxMfHh9q1a7N48WLn839fwfTZZ58RFBTE8uXLqV+/Pn5+fvTs2TNLES0jI4PHHnuMoKAggoODeeqppxg6dCgDBgzI8+/j4sWLDBkyhLJly+Lj40OvXr04cOCA8/mjR4/St29fypYti6+vLw0bNmTp0qXO1957772EhoZSpkwZateuzezZs/OcRURERESKPhWlRESkSDIMg+S0DFMehmG47Od4+umnefXVV9mzZw9NmjQhMTGR3r17s3r1av744w969uxJ3759iY6Ovu44kydP5u6772b79u307t2be++9lwsXLlzz+uTkZKZNm8Z///tf1q9fT3R0NE888YTz+ddee405c+Ywe/ZsIiMjiY+PZ9GiRfn6WYcNG8Zvv/3G4sWL2bRpE4Zh0Lt3b9LT0wEYNWoUqamprF+/nh07dvDaa685V5M999xz7N69mx9//JE9e/bw4YcfEhISkq88IiIiIlK0afueiIgUSZfSbTR4frkp7717Sg98PF3zETllyhS6d+/u/HO5cuVo2rSp888vvvgiCxcuZPHixYwePfqa4wwbNox77rkHgFdeeYV3332XzZs307Nnz6ten56ezowZM4iIiABg9OjRTJkyxfn8e++9x4QJExg4cCAA06dPd65ayosDBw6wePFiIiMjadeuHQBz5syhatWqLFq0iLvuuovo6GjuuOMOGjduDEDN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b8eOHdx6662UKVOG4OBgHnjgARITE53PDxs2jAEDBjBt2jQqVqxIcHAwo0aNcr5XXkRHR9O/f3/8/PwICAjg7rvv5syZM87nt23bxi233IK/vz8BAQG0bNmS3377DYCjR4/St29fypYti6+vLw0bNmTp0qV5ziIiufPLofMYBtQq70eFQG+z44iISDHjbnaAYs+jDNwxE2Z2hb0/wB9fQov/MzuViEjxZxiQnmzOe3v4OPoH3oC7uztDhgzhs88+Y+LEic5eKt988w02m4177rmHxMREWrZsyVNPPUVAQABLlizh//7v/4iIiKB169Y3fA+73c6gQYMICwvj119/JS4uLkv/qUz+/v589tlnVKpUiR07djBy5Ej8/f3597//zeDBg9m5cyfLli1j1SrHdvPAwMBsYyQlJdGjRw/atm3Lli1bOHv2LPfffz+jR4/OUnhbu3YtFStWZO3atRw8eJDBgwfTrFkzRo4cecOf52o/X2ZB6qeffiIjI4NRo0YxePBg1q1bB8C9995L8+bN+fDDD3Fzc+PPP//Ew8MDgFGjRpGWlsb69evx9fVl9+7d+Pn55TqHiOTNBufWvWCTk4iISHGkopQrVGwKtz4LqybBj09B9XYQHGF2KhGR4i09GV6pZM57P3MSPHN2B6n77ruPN954g59++okuXboAjq17d9xxB4GBgQQGBvLEE084r3/00UdZvnw5X3/9dY6KUqtWrWLv3r0sX76cSpUcv49XXnklWx+oZ5991nkcHh7OE088wdy5c/n3v/9NmTJl8PPzw93dnQoVKlzzvb766itSUlL44osv8PV1/PzTp0+nb9++vPbaa4SFhQFQtmxZpk+fjpubG/Xq1aNPnz6sXr06T0Wp1atXs2PHDg4fPkzVqlUB+OKLL2jYsCFbtmyhVatWREdH8+STT1KvXj0Aateu7Xx9dHQ0d9xxB40bNwagZs2auc4gInm38aCjfYW27omISF5o+56rtHsUqneA9CRY8ADYMsxOJCIihaBevXq0a9eOWbNmAXDw4EF+/vlnRowYAYDNZuPFF1+kcePGlCtXDj8/P5YvX050dHSOxt+zZw9Vq1Z1FqQA2rZtm+26efPm0b59eypUqICfnx/PPvtsjt/jyvdq2rSpsyAF0L59e+x2O/v27XOea9iwIW5ubs4/V6xYkbNnz+bqva58z6pVqzoL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Xdj64t38/HhrPhzchBd61GF4y+rcXacctUMD8L/ci+pMSgZbj5znp20n+GDVQZ5fsoNh8zcy7ostNp6d3K6Yy1v3osJL2TgSERG5Wo8ePShTpgwLFizI83xKSgpff/01I0aM4OzZswwYMICKFSvi4+ND/fr1+eKLL647brVq1Sxb+QD2799PmzZt8PLyok6dOixbtuya90yYMIEaNWrg4+NDWFgYzz//PJmZmQAsWLCAl19+ma1bt2IymTCZTJaYTSYTS5YssYyzfft2OnTogLe3N6VKlWL06NGkpKRYXh86dCi9evVi2rRphIaGUqpUKR577DHLua5n7ty5DBo0iEGDBjF37txrXt+5cyc9evQgICAAf39/WrduTVxcnOX1efPmUbduXTw9PQkNDWXs2LEAHDp0CJPJlKcK7Pz585hMJlauXAnAypUrMZlM/PLLLzRp0gRPT0/Wrl1LXFwc9913H+XKlcPPz49mzZqxfPnyPHGlp6czYcIEKleujKenJxEREcydOxfDMIiIiGDatGl5jo+NjcVkMnHgwIEb/kxuheOl0URERMRhBXq7E+jtTp0K+VdaJV3KvKb5eu73BW0pFMcR4OVG+QAvWkVo656IlDCGAZkXbXNudx8oxI0l3NzceOihh1iwYAHPPvus5WYUX3/9NdnZ2QwYMICUlBSaNGnChAkTCAgI4KeffmLw4MGEh4fTvHnzG57DbDZz//33U65cOf7880+SkpLy7TXl7+/PggULqFChAtu3b2fUqFH4+/vzzDPP0K9fP3bs2MGvv/5qSbgEBgZeM0ZqaipdunShRYsWbNy4kYSEBEaOHMnYsWPzJN5+//13QkND+f333zlw4AD9+vWjUaNGjBo1qsB5xMXFsX79er799lsMw+Df//43hw8fpmrVqgAcO3aMNm3a0K5dO1asWEFAQAAxMTFkZWUBMGfOHJ588kmmTp1K165dSUpKIiYm5oY/v6tNnDiRadOmERYWRnBwMEeOHKFbt2689tpreHp68sknn9CzZ0/27t1LlSpVAHjooYdYv3497777Lg0bNiQ+Pp4zZ85gMpkYPnw48+fP5+mnn7acY/78+bRp04aIiIibjq8wlJQSERERu5GTtAqkboVrF5fi+J68uyb/7lwDs2HrSEREilnmRXi9gm3O/b/HwaNwPZ2GDx/OW2+9xapVq2jXrh2Q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Ro0aGR4eHkZYWJgxf/78Yo/7dtzsnN944w0jPDzc8PLyMkJCQox27doZK1assE3wtyC/uQJ5rpszfZZvZb6O/jkePny4UbVqVcPDw8MoU6aM0bFjR8siwjCc6/oaxs3P19Gvb36uXjQ52zV2dlpbaW2ltZXWVo70WdbaSmsrZ7u+BbHX9ZXJMAzD+vVXIiIiIiIiIiIiBSuxPaVERERERERERMR2lJQSEREREREREZFip6SUiIiIiIiIiIgUOyWlRERERERERESk2CkpJSIiIiIiIiIixU5JKRERERERERERKXZKSomIiIiIiIiISLFTUkpERERERERERIqdklIiIpeZTCaWLFli6zBEREREnILWViJyI0pKiYhdGDp0KCaT6Zqve+65x9ahiYiIiDgcra1ExBG42ToAEZFc99xzD/Pnz8/znKenp42iEREREXFsWluJiL1TpZSI2A1PT0/Kly+f5ys4OBjIKf+eM2cOXbt2xdvbm7CwML755ps879++fTsdOnTA29ubUqVKMXr0aFJSUvIcM2/ePOrWrYunpyehoaGMHTs2z+tnzpyhd+/e+Pj4EBkZyffff2957dy5cwwcOJAyZcrg7e1NZGTkNQs9EREREXuhtZWI2DslpUTEYTz//PP06dOHrVu3MnDgQPr378/u3bsBSE1NpUuXLgQHB7Nx40a+/vprli9fnmdhNGfOHB577DFGjx7N9u3b+f7774mIiMhzjpdffpm+ffuybds2unXrxsCBA0lMTLScf9euXfzyyy/s3r2bOXPmULp06eL7AYiIiIhYkdZWImJzhoiIHRgyZIjh6upq+Pr65vl67bXXDMMwDMAYM2ZMnvfceeedxiOPPGIYhmF8+OGHRnBwsJGSkmJ5/aeffjJcXFyMkydPGoZhGBUqVDCeffbZAmMAjOeee87yOCUlxQCMX375xTAMw+jZs6cxbNgw60xYREREpAhpbSUijkA9pUTEbrRv3545c+bkeS4kJMTyfYsWLfK81qJFC2JjYwHYvXs3DRs2xNfX1/J6y5YtMZvN7N27F5PJxPHjx+nYseN1Y2jQoIHle19fXwICAkhISADgkUceoU+fPmzevJm7776bXr16ERUVdUtzFRERESlqWluJiL1TUkpE7Iavr+81Jd/W4u3tXajj3N3d8zw2mUyYzWYAunbtyuHDh/n5559ZtmwZHTt25LHHHmPatGlWj1dERETkdmltJSL2Tj2lRMRh/PHHH9c8rl27NgC1a9dm69atpKamWl6PiYnBxcWFmjVr4u/vT7Vq1YiOjr6tGMqUKcOQIUP47LPPmDFjBh9++OFtjSciIiJiK1pbiYitqVJKROxGeno6J0+ezPOcm5ubpeHl119/TdOmTWnVqhWff/45GzZsYO7cuQAMHDiQF198kSFDhvDSSy9x+vRpxo0bx+DBgylXrhwAL730EmPGjKFs2bJ07dqVCxcuEBMTw7hx4woV3wsvvECTJk2oW7cu6enp/Pjjj5aFm4iIiIi90dpKROydklIiYjd+/fVXQkND8zxXs2ZN9uzZA+TcvWXRokU8+uijhIaG8sUXX1CnTh0AfHx8WLp0KU888QTNmjXDx8eHPn36MH36dMtYQ4YMIS0tjXfeeYenn36a0qVL88ADDxQ6Pg8PDyZNmsShQ4fw9vamdevWLFq0yAozFxEREbE+ra1ExN6ZDMMwbB2EiMiNmEwmFi9eTK9evWwdioiIiIjD09pKROyBekqJiIiIiIiIiEixU1JKRERERERERESKnbbviYiIiIiIiIhIsVOllIiIiIiIiIiIFDslpUREREREREREpNgpKSUiIiIiIiIiIsVOSSkRERERERERESl2SkqJiIiIiIiIiEixU1JKRERERERERESKnZJSIiIiIiIiIiJS7JSUEhERERERERGRYqeklIiIiIiIiIiIFLv/B5UHtjYiXzBXAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 121ms/step\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted: 0.54, Actual: 0\n",
            "Predicted: 0.57, Actual: 1\n",
            "✅ Model saved successfully.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 94ms/step\n",
            "🔍 Prediction score: 0.508549\n",
            "✅ Model recommends: INVEST\n",
            "Requirement already satisfied: gradio in /usr/local/lib/python3.11/dist-packages (5.31.0)\n",
            "Requirement already satisfied: aiofiles<25.0,>=22.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (24.1.0)\n",
            "Requirement already satisfied: anyio<5.0,>=3.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (4.9.0)\n",
            "Requirement already satisfied: fastapi<1.0,>=0.115.2 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.116.1)\n",
            "Requirement already satisfied: ffmpy in /usr/local/lib/python3.11/dist-packages (from gradio) (0.6.0)\n",
            "Requirement already satisfied: gradio-client==1.10.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (1.10.1)\n",
            "Requirement already satisfied: groovy~=0.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.1.2)\n",
            "Requirement already satisfied: httpx>=0.24.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.28.1)\n",
            "Requirement already satisfied: huggingface-hub>=0.28.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.33.4)\n",
            "Requirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.1.6)\n",
            "Requirement already satisfied: markupsafe<4.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.0.2)\n",
            "Requirement already satisfied: numpy<3.0,>=1.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.0.2)\n",
            "Requirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.11.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from gradio) (25.0)\n",
            "Requirement already satisfied: pandas<3.0,>=1.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.2.2)\n",
            "Requirement already satisfied: pillow<12.0,>=8.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (11.2.1)\n",
            "Requirement already satisfied: pydantic<2.12,>=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.11.7)\n",
            "Requirement already satisfied: pydub in /usr/local/lib/python3.11/dist-packages (from gradio) (0.25.1)\n",
            "Requirement already satisfied: python-multipart>=0.0.18 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.0.20)\n",
            "Requirement already satisfied: pyyaml<7.0,>=5.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (6.0.2)\n",
            "Requirement already satisfied: ruff>=0.9.3 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.12.3)\n",
            "Requirement already satisfied: safehttpx<0.2.0,>=0.1.6 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.1.6)\n",
            "Requirement already satisfied: semantic-version~=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.10.0)\n",
            "Requirement already satisfied: starlette<1.0,>=0.40.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.47.1)\n",
            "Requirement already satisfied: tomlkit<0.14.0,>=0.12.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.13.3)\n",
            "Requirement already satisfied: typer<1.0,>=0.12 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.16.0)\n",
            "Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (4.14.1)\n",
            "Requirement already satisfied: uvicorn>=0.14.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.35.0)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from gradio-client==1.10.1->gradio) (2025.3.2)\n",
            "Requirement already satisfied: websockets<16.0,>=10.0 in /usr/local/lib/python3.11/dist-packages (from gradio-client==1.10.1->gradio) (15.0.1)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5.0,>=3.0->gradio) (3.10)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio<5.0,>=3.0->gradio) (1.3.1)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.24.1->gradio) (2025.7.14)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.24.1->gradio) (1.0.9)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.16.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (3.18.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (2.32.3)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (4.67.1)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (1.1.5)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2025.2)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (0.4.1)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (8.2.1)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\n",
            "Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (13.9.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3.0,>=1.0->gradio) (1.17.0)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.19.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.28.1->gradio) (3.4.2)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.28.1->gradio) (2.4.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\n",
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.11/dist-packages (0.2.65)\n",
            "Requirement already satisfied: pandas>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.0.2)\n",
            "Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.32.3)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.11/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: platformdirs>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.3.8)\n",
            "Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2025.2)\n",
            "Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.4.6)\n",
            "Requirement already satisfied: peewee>=3.16.2 in /usr/local/lib/python3.11/dist-packages (from yfinance) (3.18.2)\n",
            "Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.13.4)\n",
            "Requirement already satisfied: curl_cffi>=0.7 in /usr/local/lib/python3.11/dist-packages (from yfinance) (0.12.0)\n",
            "Requirement already satisfied: protobuf>=3.19.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (5.29.5)\n",
            "Requirement already satisfied: websockets>=13.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (15.0.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.7)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (4.14.1)\n",
            "Requirement already satisfied: cffi>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from curl_cffi>=0.7->yfinance) (1.17.1)\n",
            "Requirement already satisfied: certifi>=2024.2.2 in /usr/local/lib/python3.11/dist-packages (from curl_cffi>=0.7->yfinance) (2025.7.14)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.3.0->yfinance) (2.9.0.post0)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.3.0->yfinance) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (2.4.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.12.0->curl_cffi>=0.7->yfinance) (2.22)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=1.3.0->yfinance) (1.17.0)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "It looks like you are running Gradio on a hosted a Jupyter notebook. For the Gradio app to work, sharing must be enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "* Running on public URL: https://16397d829f3e474357.gradio.live\n",
            "\n",
            "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://16397d829f3e474357.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "# Import necessary libraries\n",
        "import os\n",
        "import yfinance as yf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "import time\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Input\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.preprocessing.image import load_img, img_to_array\n",
        "\n",
        "def fetch_and_preprocess_data(tickers, start_date, end_date, max_retries=3):\n",
        "    for attempt in range(max_retries):\n",
        "        try:\n",
        "            stock_data = yf.download(tickers, start=start_date, end=end_date, auto_adjust=False)\n",
        "\n",
        "            if stock_data.empty:\n",
        "                raise ValueError(\"Downloaded data is empty (likely due to rate limiting).\")\n",
        "\n",
        "            if 'Adj Close' in stock_data.columns:\n",
        "                adj_close = stock_data['Adj Close']\n",
        "            else:\n",
        "                adj_close = stock_data['Close']\n",
        "\n",
        "            returns = adj_close.pct_change().dropna()\n",
        "            if returns.empty:\n",
        "                raise ValueError(\"Returns data is empty.\")\n",
        "\n",
        "            correlation_matrix = returns.corr()\n",
        "            return correlation_matrix\n",
        "\n",
        "        except ValueError as e:\n",
        "            print(f\"[Attempt {attempt+1}/{max_retries}] {e}\")\n",
        "            time.sleep(5)\n",
        "        except Exception as e:\n",
        "            print(f\"[Attempt {attempt+1}/{max_retries}] Unexpected error: {e}\")\n",
        "            time.sleep(5)\n",
        "\n",
        "    print(\"All retries failed. Returning empty DataFrame.\")\n",
        "    return pd.DataFrame()\n",
        "  # return empty DataFrame if all retries fail\n",
        "\n",
        "# Function to plot and save the correlation heatmap\n",
        "def plot_correlation_heatmap(correlation_matrix, image_filename):\n",
        "    if correlation_matrix.isnull().values.any():\n",
        "        print(\"Correlation matrix contains NaN values. Aborting heatmap generation.\")\n",
        "        return\n",
        "\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')\n",
        "    plt.title(\"Correlation Heatmap of Stocks\")\n",
        "    plt.savefig(image_filename)\n",
        "    plt.close()\n",
        "\n",
        "# Create a CNN model\n",
        "def create_cnn_model(input_shape=(224, 224, 3)):\n",
        "    model = Sequential([\n",
        "        Input(shape=input_shape),\n",
        "        Conv2D(32, (3, 3), activation='relu'),\n",
        "        MaxPooling2D((2, 2)),\n",
        "        Conv2D(64, (3, 3), activation='relu'),\n",
        "        MaxPooling2D((2, 2)),\n",
        "        Flatten(),\n",
        "        Dense(128, activation='relu'),\n",
        "        Dense(1, activation='sigmoid')\n",
        "    ])\n",
        "    model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])\n",
        "    return model\n",
        "\n",
        "# Function to preprocess images\n",
        "def preprocess_images(image_paths, labels, target_size=(224, 224)):\n",
        "    images = []\n",
        "    for image_path in image_paths:\n",
        "        try:\n",
        "            img = load_img(image_path, target_size=target_size)\n",
        "            img_array = img_to_array(img) / 255.0\n",
        "            images.append(img_array)\n",
        "        except Exception as e:\n",
        "            print(f\"Error processing image {image_path}: {e}\")\n",
        "            continue\n",
        "\n",
        "    return np.array(images), np.array(labels)\n",
        "\n",
        "# Function to create a directory if it doesn't exist\n",
        "def create_directory(directory_path):\n",
        "    if not os.path.exists(directory_path):\n",
        "        os.makedirs(directory_path)\n",
        "        print(f\"Directory {directory_path} created!\")\n",
        "    else:\n",
        "        print(f\"Directory {directory_path} already exists!\")\n",
        "\n",
        "# Prepare dataset and train the CNN model\n",
        "def prepare_and_train_model(tickers, start_date, end_date, image_folder_path):\n",
        "    correlation_matrix = fetch_and_preprocess_data(tickers, start_date, end_date)\n",
        "\n",
        "    if correlation_matrix.empty or correlation_matrix.isnull().values.any():\n",
        "        print(\"No usable correlation matrix. Skipping training.\")\n",
        "        return None\n",
        "\n",
        "    create_directory(image_folder_path)\n",
        "\n",
        "    image_filename = f\"{image_folder_path}/correlation_heatmap.png\"\n",
        "    plot_correlation_heatmap(correlation_matrix, image_filename)\n",
        "\n",
        "    image_paths = [image_filename for _ in tickers]\n",
        "    labels = [1 if i % 2 == 0 else 0 for i in range(len(tickers))]\n",
        "\n",
        "    X, y = preprocess_images(image_paths, labels)\n",
        "    if len(X) == 0:\n",
        "        print(\"No images loaded successfully. Skipping training.\")\n",
        "        return None\n",
        "\n",
        "    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "    model = create_cnn_model(input_shape=(224, 224, 3))\n",
        "    model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=5, batch_size=16)\n",
        "\n",
        "    val_loss, val_accuracy = model.evaluate(X_val, y_val)\n",
        "    print(f\"Validation Loss: {val_loss}, Validation Accuracy: {val_accuracy}\")\n",
        "\n",
        "    return model\n",
        "\n",
        "# Function to predict using heatmap images\n",
        "def predict_using_heatmaps(model, image_paths, target_size=(224, 224)):\n",
        "    X_pred = []\n",
        "    for image_path in image_paths:\n",
        "        try:\n",
        "            img = load_img(image_path, target_size=target_size)\n",
        "            img_array = img_to_array(img) / 255.0\n",
        "            X_pred.append(img_array)\n",
        "        except Exception as e:\n",
        "            print(f\"Error loading image {image_path}: {e}\")\n",
        "            continue\n",
        "\n",
        "    if not X_pred:\n",
        "        print(\"No valid images for prediction.\")\n",
        "        return None\n",
        "\n",
        "    X_pred = np.array(X_pred)\n",
        "    predictions = model.predict(X_pred)\n",
        "    return predictions\n",
        "\n",
        "# Example usage\n",
        "tickers = [\"TCS.NS\", \"RELIANCE.BO\", \"INFY.NS\", \"HDFCBANK.NS\"]\n",
        "image_folder_path = '/content/heatmap_images'\n",
        "model = prepare_and_train_model(tickers, \"2020-01-01\", \"2021-01-01\", image_folder_path)\n",
        "\n",
        "if model:\n",
        "    image_paths_for_prediction = [f\"{image_folder_path}/correlation_heatmap.png\" for _ in tickers]\n",
        "    predictions = predict_using_heatmaps(model, image_paths_for_prediction)\n",
        "    print(f\"Predictions: {predictions}\")\n",
        "else:\n",
        "    print(\"Skipping prediction due to earlier failure.\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "# Create dummy labels.csv for testing\n",
        "os.makedirs('/content/heatmap_dataset', exist_ok=True)\n",
        "dummy_data = {\n",
        "    'file': ['heatmap_0.png', 'heatmap_1.png'],\n",
        "    'label': [1, 0]\n",
        "}\n",
        "df = pd.DataFrame(dummy_data)\n",
        "df.to_csv('/content/heatmap_dataset/labels.csv', index=False)\n",
        "print(\"✅ Dummy labels.csv created.\")\n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "def generate_and_save_heatmap(matrix, filename):\n",
        "    plt.figure(figsize=(6, 6))\n",
        "    sns.heatmap(matrix, annot=False, cmap='coolwarm')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(filename)\n",
        "    plt.close()\n",
        "\n",
        "# Example: create dummy correlation matrices\n",
        "import numpy as np\n",
        "for i in range(10):  # adjust count\n",
        "    matrix = np.random.rand(5, 5)\n",
        "    matrix = (matrix + matrix.T) / 2  # Make symmetric\n",
        "    np.fill_diagonal(matrix, 1)\n",
        "    generate_and_save_heatmap(matrix, f\"/content/heatmap_dataset/heatmap_{i}.png\")\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame({\n",
        "    \"file\": [f\"heatmap_{i}.png\" for i in range(10)],\n",
        "    \"label\": np.random.randint(0, 2, size=10)  # Replace with actual labels\n",
        "})\n",
        "df.to_csv(\"/content/heatmap_dataset/labels.csv\", index=False)\n",
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from tensorflow.keras.preprocessing.image import load_img, img_to_array\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Path setup\n",
        "image_dir = '/content/heatmap_dataset'  # Ensure this directory exists and contains images\n",
        "label_file = os.path.join(image_dir, 'labels.csv')  # Ensure this CSV exists and matches image names\n",
        "\n",
        "# Check if required paths exist\n",
        "if not os.path.exists(image_dir):\n",
        "    raise FileNotFoundError(f\"❌ Directory not found: {image_dir}\")\n",
        "if not os.path.isfile(label_file):\n",
        "    raise FileNotFoundError(f\"❌ labels.csv not found at: {label_file}\")\n",
        "\n",
        "# Load labels\n",
        "df = pd.read_csv(label_file)\n",
        "\n",
        "# Image parameters\n",
        "img_size = (128, 128)\n",
        "X, y = [], []\n",
        "\n",
        "# Loop through the labels and load images\n",
        "missing_files = []\n",
        "for _, row in df.iterrows():\n",
        "    image_path = os.path.join(image_dir, row['file'])  # Full path of the image\n",
        "    if os.path.isfile(image_path):\n",
        "        img = load_img(image_path, target_size=img_size, color_mode='rgb')\n",
        "        img_array = img_to_array(img) / 255.0  # Normalize to [0, 1]\n",
        "        X.append(img_array)\n",
        "        y.append(row['label'])\n",
        "    else:\n",
        "        print(f\"⚠️ Warning: Missing image {image_path}\")\n",
        "        missing_files.append(image_path)\n",
        "\n",
        "# Handle the case where no images were loaded\n",
        "if not X:\n",
        "    raise ValueError(\"❌ No images loaded. Please ensure the dataset is present and labeled correctly.\")\n",
        "\n",
        "# Convert to numpy arrays\n",
        "X = np.array(X)\n",
        "y = np.array(y)\n",
        "\n",
        "# Train-validation split (80% train, 20% validation)\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Output stats\n",
        "print(\"✅ Images loaded and split. Shapes:\")\n",
        "print(\"X_train:\", X_train.shape, \"y_train:\", y_train.shape)\n",
        "print(\"X_val:\", X_val.shape, \"y_val:\", y_val.shape)\n",
        "\n",
        "if missing_files:\n",
        "    print(f\"\\n⚠️ {len(missing_files)} images were missing and skipped.\")\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Define the model\n",
        "model = Sequential([\n",
        "    Input(shape=(128, 128, 3)),\n",
        "    Conv2D(32, (3, 3), activation='relu'),\n",
        "    MaxPooling2D(2, 2),\n",
        "\n",
        "    Conv2D(64, (3, 3), activation='relu'),\n",
        "    MaxPooling2D(2, 2),\n",
        "\n",
        "    Flatten(),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dropout(0.3),\n",
        "    Dense(1, activation='sigmoid')  # Binary classification\n",
        "])\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer='adam',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(\n",
        "    X_train, y_train,\n",
        "    epochs=5,\n",
        "    batch_size=16,\n",
        "    validation_data=(X_val, y_val)\n",
        ")\n",
        "\n",
        "# Evaluate the model\n",
        "val_loss, val_accuracy = model.evaluate(X_val, y_val)\n",
        "print(f\"✅ Validation Loss: {val_loss:.4f}, Validation Accuracy: {val_accuracy:.4f}\")\n",
        "\n",
        "# Plot the training history\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Loss plot\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Loss over Epochs')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "# Accuracy plot\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Accuracy over Epochs')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Predict a few samples\n",
        "predictions = model.predict(X_val[:5])\n",
        "for i, prediction in enumerate(predictions):\n",
        "    print(f\"Predicted: {prediction[0]:.2f}, Actual: {y_val[i]}\")\n",
        "# Save the model to a file\n",
        "model.save('/content/portfolio_cnn_model.h5')\n",
        "print(\"✅ Model saved successfully.\")\n",
        "from tensorflow.keras.models import load_model\n",
        "from tensorflow.keras.preprocessing.image import load_img, img_to_array\n",
        "import numpy as np\n",
        "\n",
        "# Load the saved model\n",
        "model = load_model('/content/portfolio_cnn_model.h5')\n",
        "\n",
        "# Load a sample image for prediction (you can change this file)\n",
        "sample_image_path = '/content/heatmap_dataset/heatmap_0.png'\n",
        "\n",
        "# Prepare the image\n",
        "img = load_img(sample_image_path, target_size=(128, 128))\n",
        "img_array = img_to_array(img) / 255.0\n",
        "img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension\n",
        "\n",
        "# Predict\n",
        "prediction = model.predict(img_array)[0][0]\n",
        "print(\"🔍 Prediction score:\", prediction)\n",
        "\n",
        "# Interpret the result\n",
        "if prediction > 0.5:\n",
        "    print(\"✅ Model recommends: INVEST\")\n",
        "else:\n",
        "    print(\"❌ Model recommends: DO NOT INVEST\")\n",
        "!pip install gradio\n",
        "!pip install yfinance --upgrade --no-cache-dir\n",
        "import yfinance as yf\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from tensorflow.keras.preprocessing.image import load_img, img_to_array\n",
        "from tensorflow.keras.models import load_model\n",
        "import gradio as gr\n",
        "from datetime import datetime\n",
        "\n",
        "# Load pre-trained model\n",
        "model = load_model('/content/portfolio_cnn_model.h5')\n",
        "\n",
        "# Function to fetch stock data and compute correlation matrix\n",
        "def fetch_and_preprocess_data(tickers, start_date, end_date):\n",
        "    data = yf.download(tickers, start=start_date, end=end_date)\n",
        "\n",
        "    # Check if 'Adj Close' exists, else use 'Close'\n",
        "    if 'Adj Close' in data.columns:\n",
        "        data = data['Adj Close']\n",
        "    elif 'Close' in data.columns:\n",
        "        data = data['Close']\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "    # If only one ticker, convert the data to DataFrame\n",
        "    if isinstance(data, pd.Series):\n",
        "        data = data.to_frame()\n",
        "\n",
        "    returns = data.pct_change().dropna()\n",
        "    return returns.corr()\n",
        "\n",
        "# Function to plot and save the heatmap\n",
        "def plot_correlation_heatmap(corr_matrix, image_path):\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', cbar=True, square=True)\n",
        "    plt.title(\"Correlation Heatmap of Selected Stocks\", fontsize=16)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(image_path)\n",
        "    plt.close()\n",
        "\n",
        "# Function to fetch current stock prices\n",
        "def fetch_current_prices(tickers):\n",
        "    current_prices = {}\n",
        "    for ticker in tickers:\n",
        "        data = yf.Ticker(ticker)\n",
        "        current_prices[ticker] = data.history(period=\"1d\")['Close'][0]  # Get the latest close price\n",
        "    return current_prices\n",
        "\n",
        "# Main Gradio function\n",
        "def generate_heatmap_and_predict(tickers, start_date, end_date):\n",
        "    try:\n",
        "        tickers_list = [t.strip().upper() for t in tickers.split(\",\") if t.strip()]\n",
        "        if len(tickers_list) < 2:\n",
        "            return None, \"❗ Enter at least two stock tickers.\"\n",
        "\n",
        "        # Convert to string format if datetime\n",
        "        if isinstance(start_date, datetime):\n",
        "            start_date = start_date.strftime(\"%Y-%m-%d\")\n",
        "        if isinstance(end_date, datetime):\n",
        "            end_date = end_date.strftime(\"%Y-%m-%d\")\n",
        "\n",
        "        # Fetch correlation matrix\n",
        "        corr_matrix = fetch_and_preprocess_data(tickers_list, start_date, end_date)\n",
        "\n",
        "        # Check if data is available\n",
        "        if corr_matrix is None or corr_matrix.empty:\n",
        "            return None, \"⚠️ Not enough data to compute correlation or 'Adj Close' and 'Close' are missing.\"\n",
        "\n",
        "        # Save heatmap\n",
        "        image_path = \"/content/latest_heatmap.png\"\n",
        "        plot_correlation_heatmap(corr_matrix, image_path)\n",
        "\n",
        "        # Fetch current stock prices\n",
        "        current_prices = fetch_current_prices(tickers_list)\n",
        "\n",
        "        # Load and preprocess for prediction\n",
        "        img = load_img(image_path, target_size=(128, 128))\n",
        "        img_array = img_to_array(img) / 255.0\n",
        "        img_array = np.expand_dims(img_array, axis=0)\n",
        "\n",
        "        # Make prediction\n",
        "        pred = model.predict(img_array)[0][0]\n",
        "\n",
        "        # Determine recommendation\n",
        "        recommendation = \"✅ INVEST\" if pred > 0.5 else \"❌ DO NOT INVEST\"\n",
        "\n",
        "        # Prepare current prices string\n",
        "        current_prices_str = \"\\n\".join([f\"{ticker}: ₹{price:.2f}\" for ticker, price in current_prices.items()])\n",
        "\n",
        "        return image_path, recommendation, current_prices_str\n",
        "\n",
        "    except Exception as e:\n",
        "        return None, f\"Error: {str(e)}\", \"\"\n",
        "        print(f\"Prediction: {pred}\")\n",
        "\n",
        "\n",
        "# Gradio Interface\n",
        "iface = gr.Interface(\n",
        "    fn=generate_heatmap_and_predict,\n",
        "    inputs=[\n",
        "        gr.Textbox(label=\"Enter Stock Tickers (comma-separated)\", placeholder=\"e.g. INFY.NS, TCS.NS, RELIANCE.NS\"),\n",
        "        gr.Textbox(label=\"Start Date (YYYY-MM-DD)\", placeholder=\"e.g. 2024-06-01\"),\n",
        "        gr.Textbox(label=\"End Date (YYYY-MM-DD)\", placeholder=\"e.g. 2025-05-01\")\n",
        "    ],\n",
        "    outputs=[\n",
        "        gr.Image(label=\"📈 Correlation Heatmap\"),\n",
        "        gr.Textbox(label=\"💡 Investment Recommendation\"),\n",
        "        gr.Textbox(label=\"💰 Current Stock Prices\")\n",
        "    ],\n",
        "    title=\"📊 Stock Portfolio Heatmap Analyzer\",\n",
        "    description=\"Enter stock tickers and date range to generate a correlation heatmap and get a CNN-based investment recommendation. Additionally, see the current stock prices.\",\n",
        "    theme=\"soft\",\n",
        "    live=False\n",
        ")\n",
        "\n",
        "# Launch the interface\n",
        "iface.launch()\n"
      ]
    }
  ]
}